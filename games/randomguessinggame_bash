#!/usr/bin/env bash

# Random Number Guessing Game
# by Sean Burns
# Guess a number between 1 and 100
# Date: Tue 04 Dec 2018 
##
# Todo: 
# Track score history
# Tell players how many guesses it took to get the correct guess
# Generate a plot (gnuplot maybe?) plotting each random number as they play

# ``man 5 terminfo`` for setaf values/colors
red=$(tput setaf 1)
green=$(tput setaf 2)
cyan=$(tput setaf 6)
end=$(tput sgr0)

declare -i secretnumber=$((1 + RANDOM % 100))

play_game() {
  printf "Do you want to play guess the number? y/n\n"
  read -r decision
  if [ "${decision}" = "n" ] ; then
    printf "%s\n" "${green}Sounds good${end}"
  elif [ "${decision}" != "y" ] ; then
    printf "%s\n" "${red}Must press y.${end}"
    exit 0
  else
    printf "Guess a number between 1 and 100.\n"
  fi
  while [ "${decision}" = "y" ]
  do
    the_game
  done 
}

the_game() {
  guessnumber=0
  until [ "${secretnumber}" -eq "${guessnumber}" ]
  do
    printf "Your guess?\n"
    declare -i guessnumber
    read -r guessnumber
    if [ "${guessnumber}" -gt "${secretnumber}" ] ; then
      printf "%s\n" "${red}Your number is too big. Try again.${end}"
    elif [ "${guessnumber}" -lt "${secretnumber}" ] ; then
      printf "%s\n" "${green}Your number is too low. Try again.${end}"
    fi
  done
  printf "%s\n" "${cyan}Very good!${end}"
  play_again
}

play_again() {
  echo "Do you want to play again?"
  read -r decision
  while [ "${decision}" = "y" ]
  do
    the_game
  done 
} 

main() {
  clear
  play_game
}

main
